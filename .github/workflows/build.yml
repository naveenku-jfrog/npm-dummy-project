name: Build Frontend Artifacts Test
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering
permissions:
  contents: read
  actions: read

env:
  JFROG_CLI_BUILD_NAME: GHA-NPM-Test
  JF_URL: ${{ vars.JF_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up JFrog CLI with Access Token
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        with:
          version: 'latest'

      - name: Debug JFrog CLI Server Config
        run: |
          echo "--- Listing JFrog CLI configured servers ---"
          jf c show
          echo "--- Pinging Artifactory with the configured server ---"
          # This will use the default server created by setup-jfrog-cli, typically 'setup-jfrog-cli-server'
          jf rt ping
          echo "--- Checking available npm repositories ---"
          jf rt curl /api/npm/repos # List all npm repos Artifactory knows about
          jf rt curl /api/npm/repos?type=virtual # List only virtual npm repos
          # Try to resolve a non-scoped package from npm-virtual
          jf rt s npm-virtual list --names --recursive
        working-directory: ${{ github.workspace }}

      - name: Jfrog Configure npm (Access Token)
        run: |
          jfrog npm-config --repo-resolve=npm-virtual --repo-deploy=npm-local
        working-directory: ${{ github.workspace }}

      - name: Verify npm config and filesystem state
        run: |
          echo "--- Contents of ./.npmrc (if it exists) ---"
          cat ./.npmrc || echo "Error: ./.npmrc not found after creation attempt."
          echo "--- NPM config list (effective) ---"
          npm config list # effective configuration
        working-directory: ${{ github.workspace }}

      - name: Install dependencies (Access Token)
        run: jf npm ci
        working-directory: ${{ github.workspace }}